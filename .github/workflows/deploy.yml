name: Deploy to Local VM

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]

  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if build failed'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: docker.io
  IMAGE_NAME: my-app

jobs:
  check-build-status:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Check build workflow status
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "üö® Force deployment triggered"
            else
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "üìã Manual deployment triggered"
            fi
          elif [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Build workflow succeeded"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Build workflow failed, skipping deployment"
          fi

  build-docker-image:
    needs: check-build-status
    if: needs.check-build-status.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set-tag.outputs.IMAGE_TAG }}
      HAS_DOCKER_CREDS: ${{ steps.check-creds.outputs.HAS_DOCKER_CREDS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check Docker credentials
        id: check-creds
        run: |
          if [[ -n "${{ secrets.DOCKER_USERNAME }}" && -n "${{ secrets.DOCKER_PASSWORD }}" ]]; then
            echo "HAS_DOCKER_CREDS=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Docker Hub credentials found"
          else
            echo "HAS_DOCKER_CREDS=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No Docker Hub credentials, will build locally only"
          fi

      - name: Set IMAGE_TAG
        id: set-tag
        run: |
          if [[ -n "${{ secrets.DOCKER_USERNAME }}" ]]; then
            IMAGE_TAG="${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
          else
            IMAGE_TAG="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Using image tag: $IMAGE_TAG"

      - name: Log in to Docker Hub
        if: steps.check-creds.outputs.HAS_DOCKER_CREDS == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and optionally push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: ${{ steps.check-creds.outputs.HAS_DOCKER_CREDS == 'true' }}
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: ${{ steps.check-creds.outputs.HAS_DOCKER_CREDS == 'true' && 'type=registry' || 'type=docker,dest=/tmp/myimage.tar' }}

      - name: Upload Docker image artifact if not pushing
        if: steps.check-creds.outputs.HAS_DOCKER_CREDS == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/myimage.tar

  deploy-to-vm:
    needs: [check-build-status, build-docker-image]
    if: needs.check-build-status.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Validate VM secrets
        run: |
          if [[ -z "${{ secrets.VM_HOST }}" || -z "${{ secrets.VM_USERNAME }}" || -z "${{ secrets.VM_SSH_KEY }}" ]]; then
            echo "‚ùå VM deployment secrets not configured"
            echo "Required secrets: VM_HOST, VM_USERNAME, VM_SSH_KEY"
            exit 1
          fi
          echo "‚úÖ VM configuration validated"

      - name: Download Docker image artifact if needed
        if: needs.build-docker-image.outputs.HAS_DOCKER_CREDS == 'false'
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ secrets.VM_SSH_PORT || '22' }}
          timeout: 60s
          command_timeout: 300s
          script: |
            set -e
            echo "üöÄ Starting deployment..."

            IMAGE_TAG="${{ needs.build-docker-image.outputs.IMAGE_TAG }}"
            CONTAINER_NAME="${{ env.IMAGE_NAME }}"
            HAS_DOCKER_CREDS="${{ needs.build-docker-image.outputs.HAS_DOCKER_CREDS }}"

            # Stop and remove existing container
            echo "üõë Stopping existing container..."
            docker stop "$CONTAINER_NAME" 2>/dev/null || echo "No container to stop"
            docker rm "$CONTAINER_NAME" 2>/dev/null || echo "No container to remove"

            # Handle image based on whether we have Docker Hub credentials
            if [[ "$HAS_DOCKER_CREDS" == "true" ]]; then
              echo "üì• Pulling image from Docker Hub..."
              echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
              docker pull "$IMAGE_TAG"
            else
              echo "üì¶ Using local Docker image (no registry push)"
              # Note: Image should already be available locally from previous builds
              # or you would need to transfer the artifact to the VM
            fi

            # Run new container
            echo "‚ñ∂Ô∏è Starting new container..."
            docker run -d \
              --name "$CONTAINER_NAME" \
              --restart unless-stopped \
              -p 80:3000 \
              -e NODE_ENV=production \
              -e DEPLOYMENT_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              -e GIT_SHA="${{ github.sha }}" \
              "$IMAGE_TAG"

            echo "‚è≥ Waiting 10s for container to start..."
            sleep 10

            # Verify container is running
            if docker ps | grep -q "$CONTAINER_NAME"; then
              echo "‚úÖ Container is running successfully!"
              docker ps --filter "name=$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            else
              echo "‚ùå Container failed to start!"
              echo "üìã Container logs:"
              docker logs "$CONTAINER_NAME" 2>/dev/null || echo "No logs available"
              exit 1
            fi

            echo "üéâ Deployment completed successfully!"

  verify-deployment:
    needs: deploy-to-vm
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment summary
        run: |
          echo "üìã Deployment Summary"
          echo "===================="
          echo "- Repository: ${{ github.repository }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Triggered by: ${{ github.event_name }}"
          echo "- Image tag: ${{ needs.build-docker-image.outputs.IMAGE_TAG }}"
          
          if [ "${{ needs.deploy-to-vm.result }}" == "success" ]; then
            echo "‚úÖ Deployment succeeded"
            echo ""
            echo "üîß Manual verification steps:"
            echo "1. SSH to VM: ssh -p ${{ secrets.VM_SSH_PORT || '22' }} ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}"
            echo "2. Check container: docker ps"
            echo "3. Check logs: docker logs ${{ env.IMAGE_NAME }}"
            echo "4. Test app: curl http://localhost"
          else
            echo "‚ùå Deployment failed"
            echo "üîç Check the deploy-to-vm job logs for details"
          fi