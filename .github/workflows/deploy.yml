name: Deploy to Local VM

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]

  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if build failed'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
      service:
        description: 'Service to deploy'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - backend
          - frontend

env:
  REGISTRY: docker.io

jobs:
  check-build-status:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Check build workflow status
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "üö® Force deployment triggered"
            else
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "üìã Manual deployment triggered"
            fi
          elif [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Build workflow succeeded"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Build workflow failed, skipping deployment"
          fi

  build-images:
    needs: check-build-status
    if: needs.check-build-status.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    outputs:
      HAS_DOCKER_CREDS: ${{ steps.check-creds.outputs.HAS_DOCKER_CREDS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check Docker credentials
        id: check-creds
        run: |
          if [[ -n "${{ secrets.DOCKER_USERNAME }}" && -n "${{ secrets.DOCKER_PASSWORD }}" ]]; then
            echo "HAS_DOCKER_CREDS=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Docker Hub credentials found"
          else
            echo "HAS_DOCKER_CREDS=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No Docker Hub credentials, will build locally only"
          fi

      - name: Set image tag
        id: set-tag
        run: |
          if [[ -n "${{ secrets.DOCKER_USERNAME }}" ]]; then
            IMAGE_TAG="${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/my-app-${{ matrix.service }}:latest"
          else
            IMAGE_TAG="${{ env.REGISTRY }}/${{ github.repository_owner }}/my-app-${{ matrix.service }}:latest"
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "üè∑Ô∏è Using image tag: $IMAGE_TAG"

      - name: Log in to Docker Hub
        if: steps.check-creds.outputs.HAS_DOCKER_CREDS == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and optionally push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: ${{ steps.check-creds.outputs.HAS_DOCKER_CREDS == 'true' }}
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          outputs: ${{ steps.check-creds.outputs.HAS_DOCKER_CREDS == 'true' && 'type=registry' || format('type=docker,dest=/tmp/{0}-image.tar', matrix.service) }}

      - name: Upload Docker image artifact if not pushing
        if: steps.check-creds.outputs.HAS_DOCKER_CREDS == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-image
          path: /tmp/${{ matrix.service }}-image.tar

  deploy-to-vm:
    needs: [check-build-status, build-images]
    if: needs.check-build-status.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate VM secrets
        run: |
          if [[ -z "${{ secrets.VM_HOST }}" || -z "${{ secrets.VM_USERNAME }}" || -z "${{ secrets.VM_SSH_KEY }}" ]]; then
            echo "‚ùå VM deployment secrets not configured"
            echo "Required secrets: VM_HOST, VM_USERNAME, VM_SSH_KEY"
            exit 1
          fi
          echo "‚úÖ VM configuration validated"

      - name: Download Docker image artifacts if needed
        if: needs.build-images.outputs.HAS_DOCKER_CREDS == 'false'
        uses: actions/download-artifact@v4
        with:
          pattern: "*-image"
          path: /tmp
          merge-multiple: true

      - name: Upload docker-compose and env files to VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ secrets.VM_SSH_PORT || '22' }}
          source: "docker-compose.yml,backend/.env"
          target: "/tmp/deployment/"

      - name: Upload image artifacts to VM if needed
        if: needs.build-images.outputs.HAS_DOCKER_CREDS == 'false'
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ secrets.VM_SSH_PORT || '22' }}
          source: "/tmp/*-image.tar"
          target: "/tmp/deployment/"

      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ secrets.VM_SSH_PORT || '22' }}
          timeout: 60s
          command_timeout: 300s
          script: |
            set -e
            cd /tmp/deployment
            
            echo "üöÄ Starting deployment..."
            
            HAS_DOCKER_CREDS="${{ needs.build-images.outputs.HAS_DOCKER_CREDS }}"
            SERVICE_FILTER="${{ github.event.inputs.service || 'all' }}"

            # Create the backend directory and move .env file
            mkdir -p backend
            if [[ -f "backend/.env" ]]; then
              mv backend/.env backend/
              echo "‚úÖ Backend .env file moved to correct location"
            else
              echo "‚ö†Ô∏è No backend/.env file found, make sure environment variables are set"
            fi

            # Handle Docker Hub login and image pulling vs local builds
            if [[ "$HAS_DOCKER_CREDS" == "true" ]]; then
              echo "üì• Using Docker Hub images..."
              echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
              
              # Update docker-compose to use registry images instead of local builds
              cat > docker-compose.override.yml << 'EOF'
            version: '3.8'
            services:
              backend:
                image: ${{ secrets.DOCKER_USERNAME || github.repository_owner }}/my-app-backend:latest
                build: null
              frontend:
                image: ${{ secrets.DOCKER_USERNAME || github.repository_owner }}/my-app-frontend:latest
                build: null
            EOF
              
              docker-compose pull backend frontend
            else
              echo "üì¶ Loading Docker images from artifacts..."
              if [[ -f "backend-image.tar" ]]; then
                docker load -i backend-image.tar
                echo "‚úÖ Backend image loaded"
              fi
              if [[ -f "frontend-image.tar" ]]; then
                docker load -i frontend-image.tar
                echo "‚úÖ Frontend image loaded"
              fi
              
              # Tag the loaded images to match docker-compose expectations
              if [[ -f "backend-image.tar" ]]; then
                docker tag ${{ secrets.DOCKER_USERNAME || github.repository_owner }}/my-app-backend:latest backend_backend:latest || true
              fi
              if [[ -f "frontend-image.tar" ]]; then
                docker tag ${{ secrets.DOCKER_USERNAME || github.repository_owner }}/my-app-frontend:latest frontend_frontend:latest || true
              fi
            fi

            # Stop existing services
            echo "üõë Stopping existing services..."
            docker-compose down || true

            # Start database first (it's a dependency)
            echo "üóÑÔ∏è Starting database..."
            docker-compose up -d db
            
            # Wait for database to be ready
            echo "‚è≥ Waiting for database to be ready..."
            for i in {1..30}; do
              if docker-compose exec -T db pg_isready -U postgres > /dev/null 2>&1; then
                echo "‚úÖ Database is ready!"
                break
              fi
              echo "Waiting for database... ($i/30)"
              sleep 2
            done

            # Deploy based on service filter
            if [[ "$SERVICE_FILTER" == "all" ]]; then
              echo "‚ñ∂Ô∏è Starting all services..."
              docker-compose up -d
            elif [[ "$SERVICE_FILTER" == "backend" ]]; then
              echo "‚ñ∂Ô∏è Starting backend service..."
              docker-compose up -d backend
            elif [[ "$SERVICE_FILTER" == "frontend" ]]; then
              echo "‚ñ∂Ô∏è Starting frontend service..."
              docker-compose up -d frontend
            fi

            # Wait for services to start
            echo "‚è≥ Waiting 20s for services to start..."
            sleep 20

            # Verify deployment
            echo "üîç Verifying deployment..."
            docker-compose ps
            
            # Check if services are healthy
            UNHEALTHY_SERVICES=$(docker-compose ps --services --filter "status=exited")
            if [[ -n "$UNHEALTHY_SERVICES" ]]; then
              echo "‚ùå Some services failed to start: $UNHEALTHY_SERVICES"
              echo "üìã Service logs:"
              for service in $UNHEALTHY_SERVICES; do
                echo "--- $service logs ---"
                docker-compose logs --tail=20 $service
              done
              exit 1
            fi
            
            RUNNING_SERVICES=$(docker-compose ps --services --filter "status=running")
            if [[ -z "$RUNNING_SERVICES" ]]; then
              echo "‚ùå No services are running!"
              echo "üìã All service logs:"
              docker-compose logs --tail=20
              exit 1
            else
              echo "‚úÖ Running services: $RUNNING_SERVICES"
              echo "üåê Service endpoints:"
              echo "  - Frontend: http://localhost:3000"
              echo "  - Backend: http://localhost:8000"
              echo "  - Database: localhost:5432"
            fi

            # Cleanup
            echo "üßπ Cleaning up old images..."
            docker image prune -f

            echo "üéâ Deployment completed successfully!"

  verify-deployment:
    needs: deploy-to-vm
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment summary
        run: |
          echo "üìã Deployment Summary"
          echo "===================="
          echo "- Repository: ${{ github.repository }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Triggered by: ${{ github.event_name }}"
          echo "- Service filter: ${{ github.event.inputs.service || 'all' }}"
          
          if [ "${{ needs.deploy-to-vm.result }}" == "success" ]; then
            echo "‚úÖ Deployment succeeded"
            echo ""
            echo "üîß Manual verification steps:"
            echo "1. SSH to VM: ssh -p ${{ secrets.VM_SSH_PORT || '22' }} ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}"
            echo "2. Check services: cd /tmp/deployment && docker-compose ps"
            echo "3. Check logs: docker-compose logs"
            echo "4. Test services:"
            echo "   - Frontend: curl http://localhost:3000"
            echo "   - Backend: curl http://localhost:8000"
            echo "   - Database: psql -h localhost -U postgres -d taskdb"
          else
            echo "‚ùå Deployment failed"
            echo "üîç Check the deploy-to-vm job logs for details"
          fi