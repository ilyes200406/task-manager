name: Deploy to Local VM

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]

  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if build failed'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: docker.io
  IMAGE_NAME: my-app

jobs:
  check-build-status:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Check build workflow status
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "üö® Force deployment triggered"
            else
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "üìã Manual deployment triggered"
            fi
          elif [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Build workflow succeeded"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Build workflow failed, skipping deployment"
          fi

  build-docker-image:
    needs: check-build-status
    if: needs.check-build-status.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    outputs:
      IMAGE_TAG: ${{ steps.set-tag.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set IMAGE_TAG
        id: set-tag
        run: |
          if [[ -n "${DOCKER_USERNAME}" ]]; then
            IMAGE_TAG="${REGISTRY}/${DOCKER_USERNAME}/${IMAGE_NAME}:latest"
          else
            IMAGE_TAG="${REGISTRY}/${GITHUB_REPOSITORY_OWNER}/${IMAGE_NAME}:latest"
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        if: env.DOCKER_USERNAME && env.DOCKER_PASSWORD
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and optionally push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: ${{ env.DOCKER_USERNAME && env.DOCKER_PASSWORD }}
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload Docker image artifact if not pushing
        if: ${{ !env.DOCKER_USERNAME || !env.DOCKER_PASSWORD }}
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/myimage.tar

  deploy-to-vm:
    needs: [check-build-status, build-docker-image]
    if: needs.check-build-status.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Validate VM secrets
        run: |
          if [[ -z "${{ secrets.VM_HOST }}" || -z "${{ secrets.VM_USERNAME }}" || -z "${{ secrets.VM_SSH_KEY }}" ]]; then
            echo "‚ùå VM deployment secrets not configured"
            exit 1
          fi
          echo "‚úÖ VM configuration validated"

      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ secrets.VM_SSH_PORT || '22' }}
          timeout: 60s
          command_timeout: 300s
          script: |
            set -e
            echo "üöÄ Starting deployment..."

            IMAGE_TAG="${{ needs.build-docker-image.outputs.IMAGE_TAG }}"
            CONTAINER_NAME="${{ env.IMAGE_NAME }}"

            # Stop and remove existing container
            docker stop "$CONTAINER_NAME" 2>/dev/null || true
            docker rm "$CONTAINER_NAME" 2>/dev/null || true

            # Pull latest image if credentials exist
            if [[ -n "${{ secrets.DOCKER_USERNAME }}" && -n "${{ secrets.DOCKER_PASSWORD }}" ]]; then
              echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
              docker pull "$IMAGE_TAG"
            fi

            # Run new container
            docker run -d \
              --name "$CONTAINER_NAME" \
              --restart unless-stopped \
              -p 80:3000 \
              -e NODE_ENV=production \
              -e DEPLOYMENT_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              -e GIT_SHA="${GITHUB_SHA}" \
              "$IMAGE_TAG"

            echo "‚è≥ Waiting 10s for container to start..."
            sleep 10

            if docker ps | grep -q "$CONTAINER_NAME"; then
              echo "‚úÖ Container is running"
            else
              echo "‚ùå Container failed"
              docker logs "$CONTAINER_NAME" || true
              exit 1
            fi

  verify-deployment:
    needs: deploy-to-vm
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment summary
        run: |
          echo "üìã Deployment Summary"
          echo "- Repository: ${{ github.repository }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Triggered by: ${{ github.event_name }}"
          if [ "${{ needs.deploy-to-vm.result }}" == "success" ]; then
            echo "‚úÖ Deployment succeeded"
          else
            echo "‚ùå Deployment failed"
          fi
